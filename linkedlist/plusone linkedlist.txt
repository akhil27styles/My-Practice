class Solution {
  public ListNode plusOne(ListNode head) {
    // sentinel head
    ListNode sentinel = new ListNode(0);
    sentinel.next = head;
    ListNode notNine = sentinel;

    // find the rightmost not-nine digit
    while (head != null) {
      if (head.val != 9) notNine = head;
      head = head.next;
    }
    
    // increase this rightmost not-nine digit by 1
    notNine.val++;
    notNine = notNine.next;
    
    // set all the following nines to zeros
    while (notNine != null) {
      notNine.val = 0;
      notNine = notNine.next;
    }
    
    return sentinel.val != 0 ? sentinel : sentinel.next;
  }
}





2nd approach


/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode(int x) { val = x; }
 * }
 */
class Solution {
    public ListNode plusOne(ListNode head) {
       Stack <ListNode> stack=new Stack<>();
	ListNode node=head;
       while(node!=null){
        stack.push(node);
        node=node.next;
      }
    int carry=0;
    if(stack.peek().data!=9){
    stack.peek().data++;
     return head;
    }
   else{
     stack.pop.data=0;
       carry=1;
     while(!stack.isEmpty()){
      if(stack.peek().data!=9){
         stack.peek().data++;
          return head;
       }
        else{
         stack.pop().data=0;
   } 
}
node=new ListNode(carry);
node.next=head;
return node;
}
}
}
    